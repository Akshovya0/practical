#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
using namespace std;

// Custom comparator for the priority queue (min-heap) based on heuristic values
class Compare {
public:
    bool operator()(pair<int, int>& a, pair<int, int>& b) {
        return a.second > b.second;
    }
};

class Graph {
    int V;  // Number of nodes
    unordered_map<int, vector<int>> adj;  // Adjacency list
    unordered_map<int, int> heuristics;  // Heuristic values for each node

public:
    Graph(int V) : V(V) {}

    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);  // For an undirected graph
    }

    void setHeuristics(vector<int>& heuristicValues) {
        for (int i = 0; i < V; ++i) {
            heuristics[i] = heuristicValues[i];
        }
    }

    bool GBFS(int startNode, int goalNode) {
        vector<bool> visited(V, false);
        priority_queue<pair<int, int>, vector<pair<int, int>>, Compare> pq;
        
        pq.push({startNode, heuristics[startNode]});
        
        while (!pq.empty()) {
            int currentNode = pq.top().first;
            pq.pop();
            
            cout << currentNode << " ";
            if (currentNode == goalNode) {
                cout << "\nGoal " << goalNode << " found!" << endl;
                return true;
            }
            
            if (visited[currentNode]) continue;
            visited[currentNode] = true;
            
            for (int neighbor : adj[currentNode]) {
                if (!visited[neighbor]) {
                    pq.push({neighbor, heuristics[neighbor]});
                }
            }
        }
        
        cout << "\nGoal " << goalNode << " not found!" << endl;
        return false;
    }
};

Graph createGraph() {
    int V, E;
    cout << "Enter the number of nodes: ";
    cin >> V;
    Graph G(V);

    cout << "Enter the number of edges: ";
    cin >> E;
    cout << "Enter edges (source and destination):" << endl;
    for (int i = 0; i < E; ++i) {
        int src, dest;
        cin >> src >> dest;
        G.addEdge(src, dest);
    }

    cout << "Enter heuristic values for each node (space-separated): ";
    vector<int> heuristicValues(V);
    for (int i = 0; i < V; ++i) {
        cin >> heuristicValues[i];
    }
    G.setHeuristics(heuristicValues);

    return G;
}

int main() {
    Graph G = createGraph();

    int startNode, goalNode;
    cout << "Enter the starting node for GBFS: ";
    cin >> startNode;
    cout << "Enter the goal node: ";
    cin >> goalNode;

    cout << "GBFS traversal: ";
    if (!G.GBFS(startNode, goalNode)) {
        cout << "\nGoal node was not found in the traversal." << endl;
    }

    return 0;
}
