#include <iostream>
#include <vector>
#include <queue>
using namespace std;

class Graph {
    int vertices;
    vector<vector<int>> adjList;

public:
    Graph(int v) : vertices(v), adjList(v) {}

    void addEdge(int src, int dest) {
        adjList[src].push_back(dest);
        adjList[dest].push_back(src); 
    }

    bool BFS(int start, int target) {
        vector<bool> visited(vertices, false);
        queue<int> q;

        visited[start] = true;
        q.push(start);

        while (!q.empty()) {
            int v = q.front();
            q.pop();
            cout << v << " ";

            if (v == target) {
                cout << "\nTarget " << target << " found." << endl;
                return true;
            }

            for (int neighbor : adjList[v]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }
        cout << "\nTarget " << target << " not found." << endl;
        return false;
    }
};

int main() {
    int vertices, edges;
    cout << "Enter number of vertices: ";
    cin >> vertices;
    Graph graph(vertices);

    cout << "Enter number of edges: ";
    cin >> edges;
    cout << "Enter edges (source destination):" << endl;
    for (int i = 0; i < edges; i++) {
        int src, dest;
        cin >> src >> dest;
        graph.addEdge(src, dest);
    }

    int start, target;
    cout << "Enter starting vertex: ";
    cin >> start;
    cout << "Enter vertex to search for: ";
    cin >> target;

    cout << "BFS Traversal: ";
    graph.BFS(start, target);

    return 0;
}
