#include <iostream>
#include <vector>
using namespace std;

class Graph {
    int V;  // Number of vertices
    vector<vector<int>> adj; 

public:
    Graph(int V) : V(V), adj(V) {}

    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);  
    }

    bool dfsUtil(int currentVertex, int searchVertex, vector<bool>& visited) {
        visited[currentVertex] = true;
        cout << currentVertex << " ";

        if (currentVertex == searchVertex) {
            return true;
        }

        for (int neighbor : adj[currentVertex]) {
            if (!visited[neighbor]) {
                if (dfsUtil(neighbor, searchVertex, visited)) {
                    return true;
                }
            }
        }
        return false;
    }

    bool dfs(int startVertex, int searchVertex) {
        vector<bool> visited(V, false);
        return dfsUtil(startVertex, searchVertex, visited);
    }
};

Graph createGraph() {
    int V, E;
    cout << "Enter the number of vertices: ";
    cin >> V;
    Graph G(V);

    cout << "Enter the number of edges: ";
    cin >> E;
    cout << "Enter edges (source and destination):" << endl;
    for (int i = 0; i < E; ++i) {
        int src, dest;
        cin >> src >> dest;
        G.addEdge(src, dest);
    }
    return G;
}

int main() {
    Graph G = createGraph();

    int startVertex, searchVertex;
    cout << "Enter the starting vertex for DFS: ";
    cin >> startVertex;
    cout << "Enter the vertex to search for: ";
    cin >> searchVertex;

    cout << "DFS traversal: ";
    if (G.dfs(startVertex, searchVertex)) {
        cout << "\nKey " << searchVertex << " found!" << endl;
    } else {
        cout << "\nKey " << searchVertex << " not found!" << endl;
    }

    return 0;
}
